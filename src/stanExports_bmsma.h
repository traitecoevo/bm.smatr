// Generated by rstantools.  Do not edit by hand.

/*
    bmsma is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bmsma is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bmsma.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_bmsma_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 56> locations_array__ =
  {" (found before start of program)",
  " (in 'bmsma', line 10, column 2 to column 15)",
  " (in 'bmsma', line 11, column 2 to column 27)",
  " (in 'bmsma', line 12, column 2 to column 14)",
  " (in 'bmsma', line 13, column 2 to column 26)",
  " (in 'bmsma', line 14, column 2 to column 18)",
  " (in 'bmsma', line 15, column 2 to column 30)",
  " (in 'bmsma', line 16, column 2 to column 27)",
  " (in 'bmsma', line 17, column 2 to column 27)",
  " (in 'bmsma', line 18, column 2 to column 27)",
  " (in 'bmsma', line 19, column 2 to column 27)",
  " (in 'bmsma', line 21, column 2 to column 23)",
  " (in 'bmsma', line 22, column 2 to column 21)",
  " (in 'bmsma', line 23, column 2 to column 30)",
  " (in 'bmsma', line 24, column 2 to column 35)",
  " (in 'bmsma', line 25, column 2 to column 35)",
  " (in 'bmsma', line 29, column 2 to column 11)",
  " (in 'bmsma', line 30, column 15 to column 20)",
  " (in 'bmsma', line 30, column 2 to column 22)",
  " (in 'bmsma', line 31, column 16 to column 24)",
  " (in 'bmsma', line 31, column 2 to column 26)",
  " (in 'bmsma', line 32, column 17 to column 25)",
  " (in 'bmsma', line 32, column 2 to column 27)",
  " (in 'bmsma', line 33, column 20 to column 28)",
  " (in 'bmsma', line 33, column 2 to column 30)",
  " (in 'bmsma', line 35, column 2 to column 38)",
  " (in 'bmsma', line 36, column 2 to column 34)",
  " (in 'bmsma', line 37, column 2 to column 45)",
  " (in 'bmsma', line 38, column 2 to column 44)",
  " (in 'bmsma', line 39, column 2 to column 44)",
  " (in 'bmsma', line 45, column 4 to column 26)",
  " (in 'bmsma', line 46, column 4 to column 44)",
  " (in 'bmsma', line 48, column 4 to column 31)",
  " (in 'bmsma', line 49, column 4 to column 31)",
  " (in 'bmsma', line 50, column 4 to column 31)",
  " (in 'bmsma', line 51, column 4 to column 31)",
  " (in 'bmsma', line 52, column 4 to column 31)",
  " (in 'bmsma', line 54, column 4 to column 31)",
  " (in 'bmsma', line 55, column 4 to column 31)",
  " (in 'bmsma', line 44, column 24 to line 56, column 3)",
  " (in 'bmsma', line 44, column 2 to line 56, column 3)",
  " (in 'bmsma', line 59, column 4 to column 55)",
  " (in 'bmsma', line 62, column 4 to column 74)",
  " (in 'bmsma', line 57, column 21 to line 63, column 3)",
  " (in 'bmsma', line 57, column 2 to line 63, column 3)",
  " (in 'bmsma', line 3, column 2 to column 21)",
  " (in 'bmsma', line 4, column 2 to column 24)",
  " (in 'bmsma', line 5, column 21 to column 26)",
  " (in 'bmsma', line 5, column 2 to column 28)",
  " (in 'bmsma', line 6, column 14 to column 19)",
  " (in 'bmsma', line 6, column 2 to column 21)",
  " (in 'bmsma', line 21, column 13 to column 21)",
  " (in 'bmsma', line 22, column 11 to column 19)",
  " (in 'bmsma', line 23, column 20 to column 28)",
  " (in 'bmsma', line 24, column 25 to column 33)",
  " (in 'bmsma', line 25, column 25 to column 33)"};
#include <stan_meta_header.hpp>
class model_bmsma final : public model_base_crtp<model_bmsma> {
private:
  int n_obs;
  int n_groups;
  std::vector<int> group;
  std::vector<Eigen::Matrix<double,-1,1>> x;
public:
  ~model_bmsma() {}
  model_bmsma(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_bmsma_namespace::model_bmsma";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 45;
      context__.validate_dims("data initialization", "n_obs", "int",
        std::vector<size_t>{});
      n_obs = std::numeric_limits<int>::min();
      current_statement__ = 45;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "n_obs", n_obs, 1);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "n_groups", "int",
        std::vector<size_t>{});
      n_groups = std::numeric_limits<int>::min();
      current_statement__ = 46;
      n_groups = context__.vals_i("n_groups")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "n_groups", n_groups, 1);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("group", "n_obs", n_obs);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "group", "int",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      group = std::vector<int>(n_obs, std::numeric_limits<int>::min());
      current_statement__ = 48;
      group = context__.vals_i("group");
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "group", group, 1);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("x", "n_obs", n_obs);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs),
          static_cast<size_t>(2)});
      x = std::vector<Eigen::Matrix<double,-1,1>>(n_obs,
            Eigen::Matrix<double,-1,1>::Constant(2,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 50;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 50;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("mu_x1", "n_groups", n_groups);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("b_0", "n_groups", n_groups);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("b_1", "n_groups", n_groups);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("sigma_u1", "n_groups",
        n_groups);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("sigma_u2", "n_groups",
        n_groups);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + n_groups +
      n_groups + n_groups + n_groups + n_groups;
  }
  inline std::string model_name() const final {
    return "model_bmsma";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_bmsma_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu_mu_x = DUMMY_VAR__;
      current_statement__ = 1;
      mu_mu_x = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_mu_x = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_mu_x = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ mu_b_0 = DUMMY_VAR__;
      current_statement__ = 3;
      mu_b_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_b_0 = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_b_0 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ mu_log_b_1 = DUMMY_VAR__;
      current_statement__ = 5;
      mu_log_b_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_log_b_1 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_log_b_1 = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      local_scalar_t__ a_sigma_u1 = DUMMY_VAR__;
      current_statement__ = 7;
      a_sigma_u1 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ b_sigma_u1 = DUMMY_VAR__;
      current_statement__ = 8;
      b_sigma_u1 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ a_sigma_u2 = DUMMY_VAR__;
      current_statement__ = 9;
      a_sigma_u2 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ b_sigma_u2 = DUMMY_VAR__;
      current_statement__ = 10;
      b_sigma_u2 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      std::vector<local_scalar_t__> mu_x1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 11;
      mu_x1 = in__.template read<std::vector<local_scalar_t__>>(n_groups);
      std::vector<local_scalar_t__> b_0 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 12;
      b_0 = in__.template read<std::vector<local_scalar_t__>>(n_groups);
      std::vector<local_scalar_t__> b_1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 13;
      b_1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, n_groups);
      std::vector<local_scalar_t__> sigma_u1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 14;
      sigma_u1 = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   n_groups);
      std::vector<local_scalar_t__> sigma_u2 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 15;
      sigma_u2 = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   n_groups);
      {
        local_scalar_t__ u_c = DUMMY_VAR__;
        current_statement__ = 17;
        stan::math::validate_non_negative_index("uv", "n_obs", n_obs);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> uv =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_obs,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
        current_statement__ = 19;
        stan::math::validate_non_negative_index("U", "n_groups", n_groups);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> U =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_groups,
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(2, 2,
              DUMMY_VAR__));
        current_statement__ = 21;
        stan::math::validate_non_negative_index("mu_x", "n_groups", n_groups);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mu_x =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_groups,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
        current_statement__ = 23;
        stan::math::validate_non_negative_index("sigma_u", "n_groups",
          n_groups);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> sigma_u =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n_groups,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_x1, mu_mu_x,
                         sigma_mu_x));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_0, mu_b_0,
                         sigma_b_0));
        current_statement__ = 27;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(b_1, mu_log_b_1,
                         sigma_log_b_1));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_u1,
                         a_sigma_u1, b_sigma_u1));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_u2,
                         a_sigma_u2, b_sigma_u2));
        current_statement__ = 40;
        for (int i = 1; i <= n_groups; ++i) {
          current_statement__ = 30;
          stan::model::assign(mu_x,
            stan::model::rvalue(mu_x1, "mu_x1", stan::model::index_uni(i)),
            "assigning variable mu_x", stan::model::index_uni(i),
            stan::model::index_uni(1));
          current_statement__ = 31;
          stan::model::assign(mu_x,
            (stan::model::rvalue(b_0, "b_0", stan::model::index_uni(i)) +
            (stan::model::rvalue(b_1, "b_1", stan::model::index_uni(i)) *
            stan::model::rvalue(mu_x1, "mu_x1", stan::model::index_uni(i)))),
            "assigning variable mu_x", stan::model::index_uni(i),
            stan::model::index_uni(2));
          current_statement__ = 32;
          u_c = ((1 / stan::math::sqrt(2)) /
            stan::model::rvalue(b_1, "b_1", stan::model::index_uni(i)));
          current_statement__ = 33;
          stan::model::assign(U,
            (stan::math::pow(
               stan::model::rvalue(b_1, "b_1", stan::model::index_uni(i)), 2)
            * u_c), "assigning variable U", stan::model::index_uni(i),
            stan::model::index_uni(1), stan::model::index_uni(1));
          current_statement__ = 34;
          stan::model::assign(U,
            (stan::model::rvalue(b_1, "b_1", stan::model::index_uni(i)) *
            u_c), "assigning variable U", stan::model::index_uni(i),
            stan::model::index_uni(1), stan::model::index_uni(2));
          current_statement__ = 35;
          stan::model::assign(U,
            (-stan::model::rvalue(b_1, "b_1", stan::model::index_uni(i)) *
            u_c), "assigning variable U", stan::model::index_uni(i),
            stan::model::index_uni(2), stan::model::index_uni(1));
          current_statement__ = 36;
          stan::model::assign(U, (1 * u_c), "assigning variable U",
            stan::model::index_uni(i), stan::model::index_uni(2),
            stan::model::index_uni(2));
          current_statement__ = 37;
          stan::model::assign(sigma_u,
            stan::model::rvalue(sigma_u1, "sigma_u1",
              stan::model::index_uni(i)), "assigning variable sigma_u",
            stan::model::index_uni(i), stan::model::index_uni(1));
          current_statement__ = 38;
          stan::model::assign(sigma_u,
            stan::model::rvalue(sigma_u2, "sigma_u2",
              stan::model::index_uni(i)), "assigning variable sigma_u",
            stan::model::index_uni(i), stan::model::index_uni(2));
        }
        current_statement__ = 44;
        for (int j = 1; j <= n_obs; ++j) {
          current_statement__ = 41;
          stan::model::assign(uv,
            stan::math::multiply(
              stan::model::rvalue(U, "U",
                stan::model::index_uni(
                  stan::model::rvalue(group, "group",
                    stan::model::index_uni(j)))),
              stan::math::subtract(
                stan::math::log(
                  stan::model::rvalue(x, "x", stan::model::index_uni(j))),
                stan::model::rvalue(mu_x, "mu_x",
                  stan::model::index_uni(
                    stan::model::rvalue(group, "group",
                      stan::model::index_uni(j)))))),
            "assigning variable uv", stan::model::index_uni(j));
          current_statement__ = 42;
          lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                           stan::model::rvalue(uv, "uv",
                             stan::model::index_uni(j)),
                           stan::math::rep_vector(0, 2),
                           stan::math::diag_matrix(
                             stan::model::rvalue(sigma_u, "sigma_u",
                               stan::model::index_uni(
                                 stan::model::rvalue(group, "group",
                                   stan::model::index_uni(j)))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_bmsma_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double mu_mu_x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_mu_x = in__.template read<local_scalar_t__>();
      double sigma_mu_x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_mu_x = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      double mu_b_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_b_0 = in__.template read<local_scalar_t__>();
      double sigma_b_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_b_0 = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double mu_log_b_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_log_b_1 = in__.template read<local_scalar_t__>();
      double sigma_log_b_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sigma_log_b_1 = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      double a_sigma_u1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      a_sigma_u1 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      double b_sigma_u1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      b_sigma_u1 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      double a_sigma_u2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      a_sigma_u2 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      double b_sigma_u2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      b_sigma_u2 = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      std::vector<double> mu_x1 =
        std::vector<double>(n_groups,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      mu_x1 = in__.template read<std::vector<local_scalar_t__>>(n_groups);
      std::vector<double> b_0 =
        std::vector<double>(n_groups,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      b_0 = in__.template read<std::vector<local_scalar_t__>>(n_groups);
      std::vector<double> b_1 =
        std::vector<double>(n_groups,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      b_1 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
              jacobian__>(0, lp__, n_groups);
      std::vector<double> sigma_u1 =
        std::vector<double>(n_groups,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      sigma_u1 = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   n_groups);
      std::vector<double> sigma_u2 =
        std::vector<double>(n_groups,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      sigma_u2 = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   n_groups);
      out__.write(mu_mu_x);
      out__.write(sigma_mu_x);
      out__.write(mu_b_0);
      out__.write(sigma_b_0);
      out__.write(mu_log_b_1);
      out__.write(sigma_log_b_1);
      out__.write(a_sigma_u1);
      out__.write(b_sigma_u1);
      out__.write(a_sigma_u2);
      out__.write(b_sigma_u2);
      out__.write(mu_x1);
      out__.write(b_0);
      out__.write(b_1);
      out__.write(sigma_u1);
      out__.write(sigma_u2);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_mu_x = DUMMY_VAR__;
      current_statement__ = 1;
      mu_mu_x = in__.read<local_scalar_t__>();
      out__.write(mu_mu_x);
      local_scalar_t__ sigma_mu_x = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_mu_x = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_mu_x);
      local_scalar_t__ mu_b_0 = DUMMY_VAR__;
      current_statement__ = 3;
      mu_b_0 = in__.read<local_scalar_t__>();
      out__.write(mu_b_0);
      local_scalar_t__ sigma_b_0 = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_b_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_b_0);
      local_scalar_t__ mu_log_b_1 = DUMMY_VAR__;
      current_statement__ = 5;
      mu_log_b_1 = in__.read<local_scalar_t__>();
      out__.write(mu_log_b_1);
      local_scalar_t__ sigma_log_b_1 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_log_b_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_log_b_1);
      local_scalar_t__ a_sigma_u1 = DUMMY_VAR__;
      current_statement__ = 7;
      a_sigma_u1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, a_sigma_u1);
      local_scalar_t__ b_sigma_u1 = DUMMY_VAR__;
      current_statement__ = 8;
      b_sigma_u1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, b_sigma_u1);
      local_scalar_t__ a_sigma_u2 = DUMMY_VAR__;
      current_statement__ = 9;
      a_sigma_u2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, a_sigma_u2);
      local_scalar_t__ b_sigma_u2 = DUMMY_VAR__;
      current_statement__ = 10;
      b_sigma_u2 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, b_sigma_u2);
      std::vector<local_scalar_t__> mu_x1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(mu_x1,
        in__.read<std::vector<local_scalar_t__>>(n_groups),
        "assigning variable mu_x1");
      out__.write(mu_x1);
      std::vector<local_scalar_t__> b_0 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(b_0,
        in__.read<std::vector<local_scalar_t__>>(n_groups),
        "assigning variable b_0");
      out__.write(b_0);
      std::vector<local_scalar_t__> b_1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(b_1,
        in__.read<std::vector<local_scalar_t__>>(n_groups),
        "assigning variable b_1");
      out__.write_free_lb(0, b_1);
      std::vector<local_scalar_t__> sigma_u1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(sigma_u1,
        in__.read<std::vector<local_scalar_t__>>(n_groups),
        "assigning variable sigma_u1");
      out__.write_free_lb(0, sigma_u1);
      std::vector<local_scalar_t__> sigma_u2 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(sigma_u2,
        in__.read<std::vector<local_scalar_t__>>(n_groups),
        "assigning variable sigma_u2");
      out__.write_free_lb(0, sigma_u2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_mu_x",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma_mu_x",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu_b_0", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_b_0",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_log_b_1",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_log_b_1",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "a_sigma_u1",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "b_sigma_u1",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "a_sigma_u2",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "b_sigma_u2",
        "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "mu_x1", "double",
        std::vector<size_t>{static_cast<size_t>(n_groups)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "b_0", "double",
        std::vector<size_t>{static_cast<size_t>(n_groups)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "b_1", "double",
        std::vector<size_t>{static_cast<size_t>(n_groups)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "sigma_u1",
        "double", std::vector<size_t>{static_cast<size_t>(n_groups)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "sigma_u2",
        "double", std::vector<size_t>{static_cast<size_t>(n_groups)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_mu_x = DUMMY_VAR__;
      current_statement__ = 1;
      mu_mu_x = context__.vals_r("mu_mu_x")[(1 - 1)];
      out__.write(mu_mu_x);
      local_scalar_t__ sigma_mu_x = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_mu_x = context__.vals_r("sigma_mu_x")[(1 - 1)];
      out__.write_free_lb(0, sigma_mu_x);
      local_scalar_t__ mu_b_0 = DUMMY_VAR__;
      current_statement__ = 3;
      mu_b_0 = context__.vals_r("mu_b_0")[(1 - 1)];
      out__.write(mu_b_0);
      local_scalar_t__ sigma_b_0 = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_b_0 = context__.vals_r("sigma_b_0")[(1 - 1)];
      out__.write_free_lb(0, sigma_b_0);
      local_scalar_t__ mu_log_b_1 = DUMMY_VAR__;
      current_statement__ = 5;
      mu_log_b_1 = context__.vals_r("mu_log_b_1")[(1 - 1)];
      out__.write(mu_log_b_1);
      local_scalar_t__ sigma_log_b_1 = DUMMY_VAR__;
      current_statement__ = 6;
      sigma_log_b_1 = context__.vals_r("sigma_log_b_1")[(1 - 1)];
      out__.write_free_lb(0, sigma_log_b_1);
      local_scalar_t__ a_sigma_u1 = DUMMY_VAR__;
      current_statement__ = 7;
      a_sigma_u1 = context__.vals_r("a_sigma_u1")[(1 - 1)];
      out__.write_free_lb(0, a_sigma_u1);
      local_scalar_t__ b_sigma_u1 = DUMMY_VAR__;
      current_statement__ = 8;
      b_sigma_u1 = context__.vals_r("b_sigma_u1")[(1 - 1)];
      out__.write_free_lb(0, b_sigma_u1);
      local_scalar_t__ a_sigma_u2 = DUMMY_VAR__;
      current_statement__ = 9;
      a_sigma_u2 = context__.vals_r("a_sigma_u2")[(1 - 1)];
      out__.write_free_lb(0, a_sigma_u2);
      local_scalar_t__ b_sigma_u2 = DUMMY_VAR__;
      current_statement__ = 10;
      b_sigma_u2 = context__.vals_r("b_sigma_u2")[(1 - 1)];
      out__.write_free_lb(0, b_sigma_u2);
      std::vector<local_scalar_t__> mu_x1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 11;
      mu_x1 = context__.vals_r("mu_x1");
      out__.write(mu_x1);
      std::vector<local_scalar_t__> b_0 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 12;
      b_0 = context__.vals_r("b_0");
      out__.write(b_0);
      std::vector<local_scalar_t__> b_1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 13;
      b_1 = context__.vals_r("b_1");
      out__.write_free_lb(0, b_1);
      std::vector<local_scalar_t__> sigma_u1 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 14;
      sigma_u1 = context__.vals_r("sigma_u1");
      out__.write_free_lb(0, sigma_u1);
      std::vector<local_scalar_t__> sigma_u2 =
        std::vector<local_scalar_t__>(n_groups, DUMMY_VAR__);
      current_statement__ = 15;
      sigma_u2 = context__.vals_r("sigma_u2");
      out__.write_free_lb(0, sigma_u2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_mu_x", "sigma_mu_x", "mu_b_0",
                "sigma_b_0", "mu_log_b_1", "sigma_log_b_1", "a_sigma_u1",
                "b_sigma_u1", "a_sigma_u2", "b_sigma_u2", "mu_x1", "b_0",
                "b_1", "sigma_u1", "sigma_u2"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(n_groups)},
                std::vector<size_t>{static_cast<size_t>(n_groups)},
                std::vector<size_t>{static_cast<size_t>(n_groups)},
                std::vector<size_t>{static_cast<size_t>(n_groups)},
                std::vector<size_t>{static_cast<size_t>(n_groups)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu_mu_x");
    param_names__.emplace_back(std::string() + "sigma_mu_x");
    param_names__.emplace_back(std::string() + "mu_b_0");
    param_names__.emplace_back(std::string() + "sigma_b_0");
    param_names__.emplace_back(std::string() + "mu_log_b_1");
    param_names__.emplace_back(std::string() + "sigma_log_b_1");
    param_names__.emplace_back(std::string() + "a_sigma_u1");
    param_names__.emplace_back(std::string() + "b_sigma_u1");
    param_names__.emplace_back(std::string() + "a_sigma_u2");
    param_names__.emplace_back(std::string() + "b_sigma_u2");
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_x1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_u1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_u2" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu_mu_x");
    param_names__.emplace_back(std::string() + "sigma_mu_x");
    param_names__.emplace_back(std::string() + "mu_b_0");
    param_names__.emplace_back(std::string() + "sigma_b_0");
    param_names__.emplace_back(std::string() + "mu_log_b_1");
    param_names__.emplace_back(std::string() + "sigma_log_b_1");
    param_names__.emplace_back(std::string() + "a_sigma_u1");
    param_names__.emplace_back(std::string() + "b_sigma_u1");
    param_names__.emplace_back(std::string() + "a_sigma_u2");
    param_names__.emplace_back(std::string() + "b_sigma_u2");
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_x1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_u1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_groups; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_u2" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_mu_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_mu_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_b_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_log_b_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_b_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_sigma_u1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_sigma_u1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_sigma_u2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_sigma_u2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_x1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_u1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_u2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_mu_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_mu_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_b_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_log_b_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_log_b_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_sigma_u1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_sigma_u1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a_sigma_u2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_sigma_u2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_x1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"b_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_u1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_u2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_groups) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + n_groups) + n_groups) + n_groups) + n_groups) +
      n_groups);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + n_groups) + n_groups) + n_groups) + n_groups) +
      n_groups);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_bmsma_namespace::model_bmsma;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bmsma_namespace::profiles__;
}
#endif
#endif
