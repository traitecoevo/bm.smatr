// Generated by rstantools.  Do not edit by hand.

/*
    bmsma is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bmsma is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bmsma.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_constant_single_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'constant_single', line 15, column 2 to column 31)",
                                                      " (in 'constant_single', line 16, column 2 to column 32)",
                                                      " (in 'constant_single', line 17, column 2 to column 23)",
                                                      " (in 'constant_single', line 18, column 2 to column 35)",
                                                      " (in 'constant_single', line 20, column 2 to column 35)",
                                                      " (in 'constant_single', line 54, column 2 to column 20)",
                                                      " (in 'constant_single', line 55, column 2 to column 20)",
                                                      " (in 'constant_single', line 66, column 6 to column 19)",
                                                      " (in 'constant_single', line 65, column 11 to line 67, column 5)",
                                                      " (in 'constant_single', line 59, column 8 to column 41)",
                                                      " (in 'constant_single', line 58, column 22 to line 60, column 7)",
                                                      " (in 'constant_single', line 58, column 6 to line 60, column 7)",
                                                      " (in 'constant_single', line 62, column 8 to column 42)",
                                                      " (in 'constant_single', line 63, column 8 to column 62)",
                                                      " (in 'constant_single', line 61, column 19 to line 64, column 7)",
                                                      " (in 'constant_single', line 61, column 6 to line 64, column 7)",
                                                      " (in 'constant_single', line 57, column 36 to line 65, column 5)",
                                                      " (in 'constant_single', line 57, column 4 to line 67, column 5)",
                                                      " (in 'constant_single', line 56, column 19 to line 68, column 3)",
                                                      " (in 'constant_single', line 56, column 2 to line 68, column 3)",
                                                      " (in 'constant_single', line 24, column 13 to column 18)",
                                                      " (in 'constant_single', line 24, column 2 to column 20)",
                                                      " (in 'constant_single', line 25, column 13 to column 18)",
                                                      " (in 'constant_single', line 25, column 2 to column 20)",
                                                      " (in 'constant_single', line 36, column 6 to column 19)",
                                                      " (in 'constant_single', line 35, column 11 to line 37, column 5)",
                                                      " (in 'constant_single', line 29, column 8 to column 41)",
                                                      " (in 'constant_single', line 28, column 22 to line 30, column 7)",
                                                      " (in 'constant_single', line 28, column 6 to line 30, column 7)",
                                                      " (in 'constant_single', line 32, column 8 to column 42)",
                                                      " (in 'constant_single', line 33, column 8 to column 62)",
                                                      " (in 'constant_single', line 31, column 19 to line 34, column 7)",
                                                      " (in 'constant_single', line 31, column 6 to line 34, column 7)",
                                                      " (in 'constant_single', line 27, column 36 to line 35, column 5)",
                                                      " (in 'constant_single', line 27, column 4 to line 37, column 5)",
                                                      " (in 'constant_single', line 26, column 19 to line 38, column 3)",
                                                      " (in 'constant_single', line 26, column 2 to line 38, column 3)",
                                                      " (in 'constant_single', line 40, column 2 to column 44)",
                                                      " (in 'constant_single', line 43, column 2 to column 48)",
                                                      " (in 'constant_single', line 44, column 2 to line 45, column 40)",
                                                      " (in 'constant_single', line 47, column 2 to column 35)",
                                                      " (in 'constant_single', line 48, column 2 to column 37)",
                                                      " (in 'constant_single', line 50, column 2 to column 37)",
                                                      " (in 'constant_single', line 4, column 2 to column 12)",
                                                      " (in 'constant_single', line 5, column 2 to column 12)",
                                                      " (in 'constant_single', line 6, column 13 to column 18)",
                                                      " (in 'constant_single', line 6, column 2 to column 20)",
                                                      " (in 'constant_single', line 7, column 13 to column 18)",
                                                      " (in 'constant_single', line 7, column 2 to column 20)",
                                                      " (in 'constant_single', line 8, column 23 to column 28)",
                                                      " (in 'constant_single', line 8, column 2 to column 30)",
                                                      " (in 'constant_single', line 9, column 16 to column 21)",
                                                      " (in 'constant_single', line 9, column 2 to column 23)",
                                                      " (in 'constant_single', line 10, column 15 to column 20)",
                                                      " (in 'constant_single', line 10, column 2 to column 22)",
                                                      " (in 'constant_single', line 15, column 24 to column 29)",
                                                      " (in 'constant_single', line 16, column 25 to column 30)",
                                                      " (in 'constant_single', line 54, column 13 to column 18)",
                                                      " (in 'constant_single', line 55, column 13 to column 18)"};
#include <stan_meta_header.hpp>
class model_constant_single final : public model_base_crtp<model_constant_single> {
private:
  int N_obs;
  int N_ind;
  std::vector<double> S_obs;
  std::vector<int> census;
  std::vector<double> census_interval;
  std::vector<int> id_factor;
  std::vector<double> S_0_obs;
 
public:
  ~model_constant_single() { }
  
  inline std::string model_name() const final { return "model_constant_single"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_constant_single(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_constant_single_namespace::model_constant_single";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 44;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 44;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization","N_ind","int",
          context__.to_vec());
      N_ind = std::numeric_limits<int>::min();
      
      current_statement__ = 45;
      N_ind = context__.vals_i("N_ind")[(1 - 1)];
      current_statement__ = 46;
      validate_non_negative_index("S_obs", "N_obs", N_obs);
      current_statement__ = 47;
      context__.validate_dims("data initialization","S_obs","double",
          context__.to_vec(N_obs));
      S_obs = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 47;
      assign(S_obs, nil_index_list(), context__.vals_r("S_obs"),
        "assigning variable S_obs");
      current_statement__ = 48;
      validate_non_negative_index("census", "N_obs", N_obs);
      current_statement__ = 49;
      context__.validate_dims("data initialization","census","int",
          context__.to_vec(N_obs));
      census = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 49;
      assign(census, nil_index_list(), context__.vals_i("census"),
        "assigning variable census");
      current_statement__ = 50;
      validate_non_negative_index("census_interval", "N_obs", N_obs);
      current_statement__ = 51;
      context__.validate_dims("data initialization","census_interval",
          "double",context__.to_vec(N_obs));
      census_interval = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 51;
      assign(census_interval, nil_index_list(),
        context__.vals_r("census_interval"),
        "assigning variable census_interval");
      current_statement__ = 52;
      validate_non_negative_index("id_factor", "N_obs", N_obs);
      current_statement__ = 53;
      context__.validate_dims("data initialization","id_factor","int",
          context__.to_vec(N_obs));
      id_factor = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 53;
      assign(id_factor, nil_index_list(), context__.vals_i("id_factor"),
        "assigning variable id_factor");
      current_statement__ = 54;
      validate_non_negative_index("S_0_obs", "N_ind", N_ind);
      current_statement__ = 55;
      context__.validate_dims("data initialization","S_0_obs","double",
          context__.to_vec(N_ind));
      S_0_obs = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 55;
      assign(S_0_obs, nil_index_list(), context__.vals_r("S_0_obs"),
        "assigning variable S_0_obs");
      current_statement__ = 56;
      validate_non_negative_index("ind_S_0", "N_ind", N_ind);
      current_statement__ = 57;
      validate_non_negative_index("ind_beta", "N_ind", N_ind);
      current_statement__ = 58;
      validate_non_negative_index("S_hat", "N_obs", N_obs);
      current_statement__ = 59;
      validate_non_negative_index("G_hat", "N_obs", N_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N_ind;
      num_params_r__ += N_ind;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_constant_single_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> ind_S_0;
      ind_S_0 = std::vector<local_scalar_t__>(N_ind, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 1;
        assign(ind_S_0, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ind_S_0");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(ind_S_0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ind_S_0[(sym1__ - 1)], 0, lp__),
            "assigning variable ind_S_0");
        } else {
          current_statement__ = 1;
          assign(ind_S_0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ind_S_0[(sym1__ - 1)], 0),
            "assigning variable ind_S_0");
        }}
      std::vector<local_scalar_t__> ind_beta;
      ind_beta = std::vector<local_scalar_t__>(N_ind, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 2;
        assign(ind_beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ind_beta");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(ind_beta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ind_beta[(sym1__ - 1)], 0, lp__),
            "assigning variable ind_beta");
        } else {
          current_statement__ = 2;
          assign(ind_beta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(ind_beta[(sym1__ - 1)], 0),
            "assigning variable ind_beta");
        }}
      local_scalar_t__ species_beta_mu;
      species_beta_mu = DUMMY_VAR__;
      
      current_statement__ = 3;
      species_beta_mu = in__.scalar();
      local_scalar_t__ species_beta_sigma;
      species_beta_sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      species_beta_sigma = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        species_beta_sigma = stan::math::lb_constrain(species_beta_sigma, 0,
                               lp__);
      } else {
        current_statement__ = 4;
        species_beta_sigma = stan::math::lb_constrain(species_beta_sigma, 0);
      }
      local_scalar_t__ global_error_sigma;
      global_error_sigma = DUMMY_VAR__;
      
      current_statement__ = 5;
      global_error_sigma = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        global_error_sigma = stan::math::lb_constrain(global_error_sigma, 0,
                               lp__);
      } else {
        current_statement__ = 5;
        global_error_sigma = stan::math::lb_constrain(global_error_sigma, 0);
      }
      {
        current_statement__ = 21;
        validate_non_negative_index("S_hat", "N_obs", N_obs);
        std::vector<local_scalar_t__> S_hat;
        S_hat = std::vector<local_scalar_t__>(N_obs, DUMMY_VAR__);
        
        current_statement__ = 23;
        validate_non_negative_index("G_hat", "N_obs", N_obs);
        std::vector<local_scalar_t__> G_hat;
        G_hat = std::vector<local_scalar_t__>(N_obs, DUMMY_VAR__);
        
        current_statement__ = 37;
        for (int i = 1; i <= N_obs; ++i) {
          current_statement__ = 35;
          if (logical_eq(id_factor[((i + 1) - 1)], id_factor[(i - 1)])) {
            current_statement__ = 29;
            if (logical_eq(census[(i - 1)], 1)) {
              current_statement__ = 27;
              assign(S_hat, cons_list(index_uni(i), nil_index_list()),
                ind_S_0[(id_factor[(i - 1)] - 1)], "assigning variable S_hat");
            } 
            current_statement__ = 33;
            if (logical_lt(i, N_obs)) {
              current_statement__ = 30;
              assign(G_hat, cons_list(index_uni(i), nil_index_list()),
                ind_beta[(id_factor[(i - 1)] - 1)],
                "assigning variable G_hat");
              current_statement__ = 31;
              assign(S_hat, cons_list(index_uni((i + 1)), nil_index_list()),
                (S_hat[(i - 1)] +
                  (G_hat[(i - 1)] * census_interval[((i + 1) - 1)])),
                "assigning variable S_hat");
            } 
          } else {
            current_statement__ = 25;
            assign(G_hat, cons_list(index_uni(i), nil_index_list()), 0,
              "assigning variable G_hat");
          }}
        current_statement__ = 38;
        lp_accum__.add(
          normal_lpdf<propto__>(S_obs, S_hat, global_error_sigma));
        current_statement__ = 39;
        lp_accum__.add(
          normal_lpdf<propto__>(ind_S_0, S_0_obs, global_error_sigma));
        current_statement__ = 40;
        lp_accum__.add(
          lognormal_lpdf<propto__>(ind_beta, species_beta_mu,
            species_beta_sigma));
        current_statement__ = 41;
        lp_accum__.add(normal_lpdf<propto__>(species_beta_mu, 0.1, 1));
        current_statement__ = 42;
        lp_accum__.add(cauchy_lpdf<propto__>(species_beta_sigma, 0.1, 1));
        current_statement__ = 43;
        lp_accum__.add(cauchy_lpdf<propto__>(global_error_sigma, 0.1, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_constant_single_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> ind_S_0;
      ind_S_0 = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 1;
        assign(ind_S_0, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ind_S_0");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 1;
        assign(ind_S_0, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(ind_S_0[(sym1__ - 1)], 0),
          "assigning variable ind_S_0");}
      std::vector<double> ind_beta;
      ind_beta = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 2;
        assign(ind_beta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ind_beta");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 2;
        assign(ind_beta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(ind_beta[(sym1__ - 1)], 0),
          "assigning variable ind_beta");}
      double species_beta_mu;
      species_beta_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      species_beta_mu = in__.scalar();
      double species_beta_sigma;
      species_beta_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      species_beta_sigma = in__.scalar();
      current_statement__ = 4;
      species_beta_sigma = stan::math::lb_constrain(species_beta_sigma, 0);
      double global_error_sigma;
      global_error_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      global_error_sigma = in__.scalar();
      current_statement__ = 5;
      global_error_sigma = stan::math::lb_constrain(global_error_sigma, 0);
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        vars__.emplace_back(ind_S_0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        vars__.emplace_back(ind_beta[(sym1__ - 1)]);}
      vars__.emplace_back(species_beta_mu);
      vars__.emplace_back(species_beta_sigma);
      vars__.emplace_back(global_error_sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> S_hat;
      S_hat = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> G_hat;
      G_hat = std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      for (int i = 1; i <= N_obs; ++i) {
        current_statement__ = 18;
        if (logical_eq(id_factor[((i + 1) - 1)], id_factor[(i - 1)])) {
          current_statement__ = 12;
          if (logical_eq(census[(i - 1)], 1)) {
            current_statement__ = 10;
            assign(S_hat, cons_list(index_uni(i), nil_index_list()),
              ind_S_0[(id_factor[(i - 1)] - 1)], "assigning variable S_hat");
          } 
          current_statement__ = 16;
          if (logical_lt(i, N_obs)) {
            current_statement__ = 13;
            assign(G_hat, cons_list(index_uni(i), nil_index_list()),
              ind_beta[(id_factor[(i - 1)] - 1)], "assigning variable G_hat");
            current_statement__ = 14;
            assign(S_hat, cons_list(index_uni((i + 1)), nil_index_list()),
              (S_hat[(i - 1)] +
                (G_hat[(i - 1)] * census_interval[((i + 1) - 1)])),
              "assigning variable S_hat");
          } 
        } else {
          current_statement__ = 8;
          assign(G_hat, cons_list(index_uni(i), nil_index_list()), 0,
            "assigning variable G_hat");
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        vars__.emplace_back(S_hat[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        vars__.emplace_back(G_hat[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> ind_S_0;
      ind_S_0 = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(ind_S_0, nil_index_list(), context__.vals_r("ind_S_0"),
        "assigning variable ind_S_0");
      std::vector<double> ind_S_0_free__;
      ind_S_0_free__ = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 1;
        assign(ind_S_0_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(ind_S_0[(sym1__ - 1)], 0),
          "assigning variable ind_S_0_free__");}
      std::vector<double> ind_beta;
      ind_beta = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(ind_beta, nil_index_list(), context__.vals_r("ind_beta"),
        "assigning variable ind_beta");
      std::vector<double> ind_beta_free__;
      ind_beta_free__ = std::vector<double>(N_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 2;
        assign(ind_beta_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(ind_beta[(sym1__ - 1)], 0),
          "assigning variable ind_beta_free__");}
      double species_beta_mu;
      species_beta_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      species_beta_mu = context__.vals_r("species_beta_mu")[(1 - 1)];
      double species_beta_sigma;
      species_beta_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      species_beta_sigma = context__.vals_r("species_beta_sigma")[(1 - 1)];
      double species_beta_sigma_free__;
      species_beta_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      species_beta_sigma_free__ = stan::math::lb_free(species_beta_sigma, 0);
      double global_error_sigma;
      global_error_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      global_error_sigma = context__.vals_r("global_error_sigma")[(1 - 1)];
      double global_error_sigma_free__;
      global_error_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      global_error_sigma_free__ = stan::math::lb_free(global_error_sigma, 0);
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        vars__.emplace_back(ind_S_0_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        vars__.emplace_back(ind_beta_free__[(sym1__ - 1)]);}
      vars__.emplace_back(species_beta_mu);
      vars__.emplace_back(species_beta_sigma_free__);
      vars__.emplace_back(global_error_sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("ind_S_0");
    names__.emplace_back("ind_beta");
    names__.emplace_back("species_beta_mu");
    names__.emplace_back("species_beta_sigma");
    names__.emplace_back("global_error_sigma");
    names__.emplace_back("S_hat");
    names__.emplace_back("G_hat");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_ind)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_ind)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_obs)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_S_0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "species_beta_mu");
    param_names__.emplace_back(std::string() + "species_beta_sigma");
    param_names__.emplace_back(std::string() + "global_error_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "S_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "G_hat" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_S_0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ind_beta" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "species_beta_mu");
    param_names__.emplace_back(std::string() + "species_beta_sigma");
    param_names__.emplace_back(std::string() + "global_error_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "S_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "G_hat" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ind_S_0\",\"type\":{\"name\":\"array\",\"length\":" << N_ind << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ind_beta\",\"type\":{\"name\":\"array\",\"length\":" << N_ind << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"species_beta_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"species_beta_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_error_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"S_hat\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"G_hat\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"ind_S_0\",\"type\":{\"name\":\"array\",\"length\":" << N_ind << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ind_beta\",\"type\":{\"name\":\"array\",\"length\":" << N_ind << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"species_beta_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"species_beta_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_error_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"S_hat\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"G_hat\",\"type\":{\"name\":\"array\",\"length\":" << N_obs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_constant_single_namespace::model_constant_single;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_constant_single_namespace::profiles__;
}
#endif
#endif
